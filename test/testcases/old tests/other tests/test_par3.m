%VESYLA code for CNN implementation 
%we will parallelize the image
kernel_size=16;
imagesize=256;
Kernels=10;
stride=1;
%Poolingvar=0;
RFILE_SIZE = 32; % Size of a RegisterFile
MEM_BLOCK_SIZE = 16

%SRAM to declaration
imageA_mem     = fi([0.103601 0.003601 0.003662 0.003723 0.003815 0.003845 0.003540 0.003418 0.003479 0.003845 0.004120 0.004242 0.004303 0.004456 0.005096 0.003662 0.002014 0.001404 0.001831 0.002319 0.002106 0.001648 0.001831 0.001770 0.001617 0.001495 0.001404 0.001404 0.001465 0.001495 0.001831 0.001770 0.001740 0.001740 0.001801 0.001831 0.001801 0.001740 0.001556 0.001648 0.001801 0.001923 0.001923 0.001831 0.001678 0.001526 0.001343 0.001251 0.001343 0.001526 0.001526 0.001343 0.001251 0.001343 0.001740 0.001740 0.001740 0.001740 0.001740 0.001740 0.001740 0.001740 0.001465 0.001465 0.001495 0.001556 0.001617 0.001678 0.001740 0.001770 0.001648 0.001648 0.001678 0.001770 0.001801 0.001831 0.001923 0.001923 0.002075 0.002106 0.002167 0.002228 0.002319 0.002380 0.002472 0.002502 0.002747 0.002747 0.003052 0.002228 0.010010 0.009583 0.010010 0.009857 0.002563 0.002655 0.001801 0.002289 0.001923 0.002075 0.001953 0.001953 0.002014 0.002045 0.002106 0.002167 0.002197 0.002197 0.002228 0.002197 0.002167 0.002106 0.002075 0.002045 0.002014 0.001953 0.002106 0.002167 0.002167 0.002167 0.002197 0.002228 0.002228 0.002228 0.002441 0.002441 0.002472 0.002502 0.002563 0.002594 0.002625 0.002655 0.002655 0.002716 0.002747 0.002777 0.002869 0.002899 0.002930 0.002930 0.002869 0.002930 0.003113 0.003265 0.003326 0.003326 0.003296 0.003204 0.003448 0.003479 0.003479 0.003540 0.003571 0.003571 0.003601 0.003601 0.003693 0.003693 0.003693 0.003693 0.003693 0.003693 0.003693 0.003693 0.003845 0.003845 0.003815 0.003815 0.003754 0.003754 0.003723 0.003723 0.003662 0.003662 0.003662 0.003662 0.003662 0.003662 0.003662 0.003662 0.003448 0.003418 0.003387 0.003326 0.003326 0.003387 0.003448 0.003479 0.003448 0.003601 0.003723 0.003815 0.004120 0.004517 0.004639 0.004517 0.003937 0.002441 0.001221 0.001373 0.002045 0.002106 0.001740 0.001373 0.001801 0.001801 0.001770 0.001740 0.001740 0.001740 0.001740 0.001740 0.001404 0.001343 0.001251 0.001282 0.001373 0.001404 0.001343 0.001282 0.001251 0.001099 0.001007 0.001099 0.001343 0.001465 0.001343 0.001221 0.001495 0.001373 0.001373 0.001526 0.001526 0.001373 0.001373 0.001495 0.001404 0.001404 0.001404 0.001404 0.001404 0.001404 0.001404 0.001404 0.001495 0.001526 0.001556 0.001648 0.001740 0.001770 0.001801 0.001831 0.001801 0.001801 0.001831 0.001892], 1, 16, 15, 'RoundingMethod', 'Floor'); %! MEM<> [0,0] 
Kernel_mem = fi([0.103601 0.003601 0.003662 0.003723 0.003815 0.003845 0.003540 0.003418 0.003479 0.003845 0.004120 0.004242 0.004303 0.004456 0.005096 0.003662 0.002014 0.001404 0.001831 0.002319 0.002106 0.001648 0.001831 0.001770 0.001617 0.001495 0.001404 0.001404 0.001465 0.001495 0.001831 0.001770 0.001740 0.001740 0.001801 0.001831 0.001801 0.001740 0.001556 0.001648 0.001801 0.001923 0.001923 0.001831 0.001678 0.001526 0.001343 0.001251 0.001343 0.001526 0.001526 0.001343 0.001251 0.001343 0.001740 0.001740 0.001740 0.001740 0.001740 0.001740 0.001740 0.001740 0.001465 0.001465 0.001495 0.001556 0.001617 0.001678 0.001740 0.001770 0.001648 0.001648 0.001678 0.001770 0.001801 0.001831 0.001923 0.001923 0.002075 0.002106 0.002167 0.002228 0.002319 0.002380 0.002472 0.002502 0.002747 0.002747 0.003052 0.002228 0.010010 0.009583 0.010010 0.009857 0.002563 0.002655 0.001801 0.002289 0.001923 0.002075 0.001953 0.001953 0.002014 0.002045 0.002106 0.002167 0.002197 0.002197 0.002228 0.002197 0.002167 0.002106 0.002075 0.002045 0.002014 0.001953 0.002106 0.002167 0.002167 0.002167 0.002197 0.002228 0.002228 0.002228 0.002441 0.002441 0.002472 0.002502 0.002563 0.002594 0.002625 0.002655 0.002655 0.002716 0.002747 0.002777 0.002869 0.002899 0.002930 0.002930 0.002869 0.002930 0.003113 0.003265 0.003326 0.003326 0.003296 0.003204 0.003448 0.003479 0.003479 0.003540 0.003571 0.003571 0.003601 0.003601 0.003693 0.003693 0.003693 0.003693 0.003693 0.003693 0.003693 0.003693 0.003845 0.003845 0.003815 0.003815 0.003754 0.003754 0.003723 0.003723 0.003662 0.003662 0.003662 0.003662 0.003662 0.003662 0.003662 0.003662 0.003448 0.003418 0.003387 0.003326 0.003326 0.003387 0.003448 0.003479 0.003448 0.003601 0.003723 0.003815 0.004120 0.004517 0.004639 0.004517 0.003937 0.002441 0.001221 0.001373 0.002045 0.002106 0.001740 0.001373 0.001801 0.001801 0.001770 0.001740 0.001740 0.001740 0.001740 0.001740 0.001404 0.001343 0.001251 0.001282 0.001373 0.001404 0.001343 0.001282 0.001251 0.001099 0.001007 0.001099 0.001343 0.001465 0.001343 0.001221 0.001495 0.001373 0.001373 0.001526 0.001526 0.001373 0.001373 0.001495 0.001404 0.001404 0.001404 0.001404 0.001404 0.001404 0.001404 0.001404 0.001495 0.001526 0.001556 0.001648 0.001740 0.001770 0.001801 0.001831 0.001801 0.001801 0.001831 0.001892], 1, 16, 15, 'RoundingMethod', 'Floor'); %! MEM<> [0,1] 
convolution_mem = fi(zeros(1,OUTPUT_SIZE), 1, 16, 15, 'RoundingMethod', 'Floor'); %! MEM<> [0,2] % covariance result
%Registerfile declaration
imageA     = fi(zeros(1,RFILE_SIZE/2), 1, 16, 15, 'RoundingMethod', 'Floor'); %! RFILE<> [0,0]
kernel_reg1 = fi([0.103601 0.003601 0.003662 0.003723 0.003815 0.003845 0.003540 0.003418 0.003479 0.003845 0.004120 0.004242 0.004303 0.004456 0.005096 0.003662],1, 16, 15, 'RoundingMethod', 'Floor'); %! RFILE<> [0,0]
kernel_reg2 = fi([0.103601 0.003601 0.003662 0.003723 0.003815 0.003845 0.003540 0.003418 0.003479 0.003845 0.004120 0.004242 0.004303 0.004456 0.005096 0.003662],1, 16, 15, 'RoundingMethod', 'Floor'); %! RFILE<> [0,1]
kernel_reg3 = fi([0.103601 0.003601 0.003662 0.003723 0.003815 0.003845 0.003540 0.003418 0.003479 0.003845 0.004120 0.004242 0.004303 0.004456 0.005096 0.003662],1, 16, 15, 'RoundingMethod', 'Floor'); %! RFILE<> [1,0]
convolution= fi(zeros(1,MEM_BLOCK_SIZE), 1, 16, 15, 'RoundingMethod', 'Floor'); %! RFILE<> [0,2]

%sweep across 10 images
%for imagessweep= 1:M/2
 %sweep across all pisels of an image
 
 for K= 1:Kernels
  %can we execute these three in parallel   
     Kernel_reg1=Kernel_mem(K);
     Kernel_reg2=Kernel_mem(K);
     Kernel_reg3=Kernel_mem(K);
     for Im= 1:MEM_BLOCK_SIZE*stride:imagesize/(MEM_BLOCK_SIZE*stride)
         for convtrans=1:MEM_BLOCK_SIZE
     %transfer data from DIMARCH to registerfiles
            imageA=imageA_mem(convtrans*MEM_BLOCK_SIZE- (MEM_BLOCK_SIZE-1): convtrans*MEM_BLOCK_SIZE);  
            % we need to execute these three in parallel
            %! RESOURCE_SHARING_BEGIN
            convolution1(convtrans) =sum(fi(imageA .* kernel_reg1, 1, 16, 15, 'RoundingMethod', 'Floor')); %! DPU<sat> [0,0]
            convolution2(convtrans) =sum(fi(imageA .* kernel_reg2, 1, 16, 15, 'RoundingMethod', 'Floor')); %! DPU<sat> [0,1]
            convolution3(convtrans) =sum(fi(imageA .* kernel_reg3, 1, 16, 15, 'RoundingMethod', 'Floor')); %! DPU<sat> [1,0]
            %! RESOURCE_SHARING_END
  %transfer data back to the SRAM block it came from 
  %Image1_dimarch(imagesweep:imagesweep+16)=additionresult;
         end
        convolution_mem(Im:Im+MEM_BLOCK_SIZE-1) = convolution;
        convolution(1:MEM_BLOCK_SIZE) = 0; %! DPU [0,0]
     end
 end


